package main;
import java.util.Arrays;

class Solution {
	// Time 0(N^2) Space 0(N)
    public int minMalwareSpread(int[][] graph, int[] initial) {
    	int n = graph.length;
    	// here is rank is size/number of connected nodes
    	int []parent = new int[n], rank = new int[n];
    	for(int i = 0;i < n;i++) {
    		parent[i] = i;
    		rank[i] = 1;
    	}
    	for(int i = 0;i < n;i++) {
    		for(int j = i+1;j < n;j++) {
    			if(graph[i][j] == 0)
    				continue;
    			union(i, j, parent, rank);
    		}
    	}
    	
    	Arrays.sort(initial);
    	int ans = initial[0], par = find(initial[0], parent);
    	for(int i = 1;i < initial.length;i++) {
    		int p = find(initial[i], parent);
    		if(p == par)
    			continue;
    		
    		union(par, p, parent, rank);
    		if(parent[par] == p)
    			ans = initial[i];
    	}
    	return ans;
    }
    
    private int find(int i, int []parent) {
    	if(parent[i] != i)
    		parent[i] = find(parent[i], parent);
    	return parent[i];
    }
    
    private void union(int a, int b, int []parent, int []rank) {
    	int x = find(a, parent);
    	int y = find(b, parent);
    	if(rank[x] > rank[y]) {
    		parent[y] = x;
    		rank[x] += rank[y];
    	} else if(rank[x] < rank[y]) {
    		parent[x] = y;
    		rank[y] += rank[x];
    	} else {
    		parent[y] = x;
    		rank[x] += rank[y];
    	}
    }
}

public class Main {
	public static void main(String[] args) {
		int [][]graph = {{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,1,0},{0,0,0,1,1,0},{0,0,0,0,0,1}};
		int []initial = {5,0};
		System.out.println(new Solution().minMalwareSpread(graph, initial));
	}
}
