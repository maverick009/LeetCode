package main;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
    	int n = graph.length;
    	
    	Arrays.sort(initial);
    	Set<Integer> set = new HashSet<>();
    	for(int i : initial)
    		set.add(i);
    	
    	int []parent = new int[n], size = new int[n];
    	for(int i = 0;i < n;i++) {
    		parent[i] = i;
    		size[i] = 1;
    	}
    	
    	for(int i = 0;i < n;i++) {
    		if(set.contains(i))
    			continue;
    		for(int j = 0;j < n;j++) {
    			if(set.contains(j))
        			continue;
    			if(graph[i][j] == 1)
    				union(i, j, parent, size);
    		}
    	}
    	
    	int ans = -1, total = Integer.MAX_VALUE;
    	for(int i = 0;i < initial.length;i++) {
    		Map<Integer, Integer> map = new HashMap<>();
    		for(int j = 0;j < initial.length;j++) {
    			if(j == i)
    				continue;
    			int id = initial[j];
    			for(int k = 0;k < n;k++) {
    				if(k == initial[i])
    					continue;
    				if(graph[id][k] == 1) {
    					int par = find(parent, k);
    					map.putIfAbsent(par, -size[par]);
    				}
    			}
    			int sum = 0;
    			for(int val : map.values())
    				sum += val;
    			if(sum < total) {
    				sum = total;
    				ans = initial[id];
    			}
    		}
    	}
    	return ans;
    }
    
    private int find(int []parent, int i) {
    	if(parent[i] != i)
    		parent[i] = find(parent, parent[i]);
    	return parent[i];
    }
    
    private void union(int a, int b, int []parent, int []size) {
    	int x = find(parent, a);
    	int y= find(parent, b);
    	if(size[x] < size[y]) {
    		parent[x] = y;
    		size[y] += size[x];
    	} else {
    		parent[y] = x;
    		size[x] += size[y];
    	}
    }
}

public class Main {
	public static void main(String[] args) {
		int [][]graph = {{1,1,0},{1,1,1},{0,1,1}};
		int []initial = {0,1};
		System.out.println(new Solution().minMalwareSpread(graph, initial));
	}
}
